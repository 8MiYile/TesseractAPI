plugins {
    id 'net.minecraftforge.gradle.userdev' version '3.1.1'
    id 'com.github.johnrengelman.shadow'
    id 'maven-publish'
}

archivesBaseName = 'tesseract-forge'
version = rootProject.version
group = rootProject.group

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: "${mappings_version}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                tesseract {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                tesseract {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'tesseract', '--all', '--output', '"' + rootProject.file('src/generated/resources/') + '"',
                    '--existing', '"' + sourceSets.main.resources.srcDirs[0] + '"'

            mods {
                tesseract {
                    source sourceSets.main
                }
            }
        }
    }
}

assemble.dependsOn shadowJar

configurations {
    deobf
    embed
    implementation.extendsFrom(embed)
}

shadowJar {
    configurations = [project.configurations.embed]
}

// Deobfuscated jar; development purposes.
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
task deobfJar(type: ShadowJar, dependsOn: 'classes') {
    from sourceSets.main.output
    configurations = [project.configurations.embed]
    classifier "dev"
}

// Sources jar; development purposes.
task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier "sources"
}

repositories {
    jcenter()
}
dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    embed project(':')
}

publishing {
    publications {
        forge(MavenPublication) {
            artifactId = archivesBaseName
            artifact deobfJar
            artifact shadowJar
        }
    }
    repositories {
        rootProject.configurePublishingRepositories(delegate)
    }
}

artifacts {
    deobf deobfJar
}