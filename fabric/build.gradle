architectury {
    platformSetupLoomIde()
    fabric()
}

archivesBaseName = "${rootProject.tesseract_archive_base_name}-fabric"
version = "${rootProject.minecraft_version}-${rootProject.tesseract_mod_version}"

loom {
    silentMojangMappingsLicense()
}

repositories {
    maven { url = "https://mvn.devos.one/snapshots/" }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"

    common(project(path: ":tesseract-common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":tesseract-common", configuration: "transformProductionFabric")) { transitive false }
    modImplementation(include("com.github.FeltMC.Fabricated-Forge-API:fabricated-forge-caps:${rootProject.fabricated_forge_hash}")){
        transitive = false
    }
    implementation(include("com.github.Trinsdar:forgeconfigapiport-fabric:abc19f9a99")){
        transitive = false
    }
    modCompileOnly("com.github.FeltMC:Porting-Lib:${rootProject.port_lib_hash}"){ transitive(false) }
    modApi(include("teamreborn:energy:${rootProject.energy_version}")) {
        transitive = false
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

sourcesJar {
    def commonSources = project(":tesseract-common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.tesseract_archive_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}